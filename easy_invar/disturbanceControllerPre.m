function [preOmega] = disturbanceControllerPre(plsys,Omega,N,Kx,Kw,u0)
%disturbanceControllerPre Compute the pre of the given set in the given
%system with the given disturbance feedback controller
%   To do this, we consider the lifted pre space, and restrict to inputs
%   generated by the controller. Then the states that the controller drives
%   into Omega for all disturbances can be computed by considering the
%   componentwise minimum of the lifted constraints which can be computed
%   using a linear program.
%
%   plsys - polytopic linear system
%   Omega - target set
%   N - number of backwards steps
%   Kx,Kw,u0 - the controller found by the algorithm
%       u = Kx x_0 + Kw w + u0
%       where x_0 is the initial state and w is the disturbance sequence
%       note that u,w are in reverse order, the last input is first
%

[Gbarx, Gbaru, Gbarw, gbarg, gbarh] = computeLiftedPre(plsys,Omega,N,0);

w = sdpvar(plsys.l * N,1,'full');

constraints = kron(eye(N), plsys.W.A) * w <= repmat(plsys.W.b,N,1);
objective = -(Gbaru * Kw * w + Gbarw * w);

options = sdpsettings('solver', 'gurobi', 'verbose', 0);

diagnostics = optimize(constraints, objective, options);

d = zeros(size(objective,1),1);

for i = 1:size(d,1)
    selectsolution(i);
    d(i) = value(objective(i));
end
preOmega = Polyhedron('A', Gbarx + Gbaru * Kx, 'b', (gbarg + gbarh + d - Gbaru * u0));

end

